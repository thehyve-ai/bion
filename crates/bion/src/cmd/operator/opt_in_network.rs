use alloy_primitives::Address;
use clap::Parser;
use foundry_cli::{
    opts::{EthereumOpts, TransactionOpts},
    utils::{self, LoadConfig},
};
use foundry_common::ens::NameOrAddress;
use hyve_cli_runner::CliContext;
use safe_multisig::{transaction_data::ExecutableSafeTransaction, SafeClient};

use crate::{
    cast::cmd::send::SendTxArgs,
    cmd::{
        alias_utils::{get_alias_config, set_foundry_signing_method},
        utils::get_chain_id,
    },
    common::{DirsCliArgs, SigningMethod},
    symbiotic::{
        calls::is_opted_in_network,
        consts::{get_network_opt_in_service, get_network_registry, get_operator_registry},
        network_utils::validate_network_symbiotic_status,
        operator_utils::validate_operator_symbiotic_status,
    },
    utils::{print_loading_until_async, validate_cli_args},
};

#[derive(Debug, Parser)]
#[clap(about = "Opt in your operator to a network.")]
pub struct OptInNetworkCommand {
    #[arg(value_name = "NETWORK", help = "The address of the network.")]
    network: Address,

    #[arg(skip)]
    alias: String,

    #[clap(flatten)]
    dirs: DirsCliArgs,

    #[clap(flatten)]
    eth: EthereumOpts,

    #[clap(flatten)]
    tx: TransactionOpts,

    /// Send via `eth_sendTransaction using the `--from` argument or $ETH_FROM as sender
    #[arg(long, requires = "from")]
    pub unlocked: bool,

    /// Timeout for sending the transaction.
    #[arg(long, env = "ETH_TIMEOUT")]
    pub timeout: Option<u64>,

    /// The number of confirmations until the receipt is fetched.
    #[arg(long, default_value = "1")]
    confirmations: u64,
}

impl OptInNetworkCommand {
    pub fn with_alias(self, alias: String) -> Self {
        Self { alias, ..self }
    }

    pub async fn execute(self, _cli: CliContext) -> eyre::Result<()> {
        let Self { network, alias, dirs, mut eth, tx, confirmations, timeout, unlocked } = self;

        validate_cli_args(&eth)?;

        let config = eth.load_config()?;
        let provider = utils::get_provider(&config)?;
        let chain_id = get_chain_id(&provider).await?;
        let operator_config = get_alias_config(chain_id, alias, &dirs)?;
        let operator = operator_config.address;
        let network_registry = get_network_registry(chain_id)?;
        let opt_in_service = get_network_opt_in_service(chain_id)?;
        let operator_registry = get_operator_registry(chain_id)?;
        set_foundry_signing_method(&operator_config, &mut eth)?;

        validate_operator_symbiotic_status(operator, operator_registry, &provider).await?;
        validate_network_symbiotic_status(network, network_registry, &provider).await?;

        let is_opted_in = print_loading_until_async(
            "Checking opted in status",
            is_opted_in_network(operator, network, opt_in_service, &provider),
        )
        .await?;

        if is_opted_in {
            return Err(eyre::eyre!("Operator is already opted in."));
        }

        let to = NameOrAddress::Address(opt_in_service);

        let args = SendTxArgs {
            to: Some(to),
            sig: Some("optIn(address where)".to_string()),
            args: vec![network.to_string()],
            cast_async: false,
            confirmations,
            command: None,
            unlocked,
            timeout,
            tx,
            eth: eth.clone(),
            path: None,
        };

        match operator_config.signing_method {
            Some(SigningMethod::MultiSig) => {
                let safe = SafeClient::new(chain_id)?;
                let signer = eth.wallet.signer().await?;
                let mut executable_args = args.clone();
                if let Some(ExecutableSafeTransaction { safe_address, input_data }) =
                    safe.send_tx(operator, signer, args.try_into()?, &provider).await?
                {
                    executable_args.to = Some(NameOrAddress::Address(safe_address));
                    executable_args.sig = Some(input_data);
                    let _ = executable_args.run().await?;
                }
            }
            _ => {
                let _ = args.run().await?;
            }
        };
        Ok(())
    }
}

#[cfg(test)]
mod test {
    use alloy::node_bindings::Anvil;
    use alloy_network::EthereumWallet;
    use alloy_provider::{ProviderBuilder, WsConnect};
    use alloy_signer::k256::pkcs8::der::pem;
    use alloy_signer_local::PrivateKeySigner;
    use alloy_sol_types::sol;

    use crate::symbiotic::contracts::{INetworkRegistry, IOperatorRegistry, IOptInService};

    sol!(
        #[sol(rpc, bytecode = "60808060405234601557610241908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806314887c581461013d5780632acde098146100d15780635cd8b15e146100b55763b42ba2a214610045575f80fd5b346100b15760203660031901126100b1576004355f5481101561009d575f80527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301546040516001600160a01b039091168152602090f35b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b346100b1575f3660031901126100b15760205f54604051908152f35b346100b1575f3660031901126100b1576100f6335f52600160205260405f2054151590565b61012b5761010333610184565b50337fb919910dcefbf753bfd926ab3b1d3f85d877190c3d01ba1bd585047b99b99f0b5f80a2005b6040516342ee68b560e01b8152600490fd5b346100b15760203660031901126100b1576004356001600160a01b038116908190036100b15761017a6020915f52600160205260405f2054151590565b6040519015158152f35b805f52600160205260405f2054155f14610206575f54680100000000000000008110156101f25760018101805f5581101561009d5781907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301555f54905f52600160205260405f2055600190565b634e487b7160e01b5f52604160045260245ffd5b505f9056fea264697066735822122075b5716387895e629e74b8e3c027010c3b81a41d26ee7b556bbe4c038045108064736f6c63430008190033")]
        contract OperatorRegistry { }

        #[sol(rpc, bytecode = "60808060405234601557610241908161001a8239f35b5f80fdfe60806040526004361015610011575f80fd5b5f3560e01c806314887c581461013d5780635cd8b15e1461012157806387140b5b146100b55763b42ba2a214610045575f80fd5b346100b15760203660031901126100b1576004355f5481101561009d575f80527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301546040516001600160a01b039091168152602090f35b634e487b7160e01b5f52603260045260245ffd5b5f80fd5b346100b1575f3660031901126100b1576100da335f52600160205260405f2054151590565b61010f576100e733610184565b50337fb919910dcefbf753bfd926ab3b1d3f85d877190c3d01ba1bd585047b99b99f0b5f80a2005b60405163ad5fcda560e01b8152600490fd5b346100b1575f3660031901126100b15760205f54604051908152f35b346100b15760203660031901126100b1576004356001600160a01b038116908190036100b15761017a6020915f52600160205260405f2054151590565b6040519015158152f35b805f52600160205260405f2054155f14610206575f54680100000000000000008110156101f25760018101805f5581101561009d5781907f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56301555f54905f52600160205260405f2055600190565b634e487b7160e01b5f52604160045260245ffd5b505f9056fea264697066735822122090eb7e699b2d71a03df819f8fd21ac23ecd223b2d0c56f2835c6e092ca0962e364736f6c63430008190033")]
        contract NetworkRegistry {}

        #[sol(rpc, bytecode = "6101a0604090808252346101dc57611c85803803809161001f82856101e0565b833981016060828203126101dc5761003682610203565b6020610043818501610203565b848601516001600160401b03959194918682116101dc57019181601f840112156101dc5782518681116101c857875193610086601f8301601f19168401866101e0565b818552828501938383830101116101dc57815f9284809301865e85010152865190878201828110888211176101c857885260018252808201603160f81b81526100ce85610217565b936101209485526100de846103ae565b95610140968752519020928360e0525190209761010098808a524660a0528151928301937f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f85528284015260608301524660808301523060a083015260a0825260c0820197828910908911176101c8578790525190206080523060c0526101609283526101809384526117a095866104e5873960805186611222015260a051866112dd015260c051866111ec015260e0518661127101525185611297015251846102dd015251836103060152518281816105d90152610c3901525181818161024e0152610c8c0152f35b634e487b7160e01b5f52604160045260245ffd5b5f80fd5b601f909101601f19168101906001600160401b038211908210176101c857604052565b51906001600160a01b03821682036101dc57565b80516020908181101561028d5750601f82511161024f578082519201519080831061024157501790565b825f19910360031b1b161790565b60448260405192839163305a27a960e01b83528160048401528051918291826024860152018484015e5f828201840152601f01601f19168101030190fd5b906001600160401b0382116101c8575f54926001938481811c911680156103a4575b8382101461039057601f811161035d575b5081601f84116001146102fb57509282939183925f946102f0575b50501b915f199060031b1c1916175f5560ff90565b015192505f806102db565b919083601f1981165f8052845f20945f905b88838310610343575050501061032b575b505050811b015f5560ff90565b01515f1960f88460031b161c191690555f808061031e565b85870151885590960195948501948793509081019061030d565b5f805284601f845f20920160051c820191601f860160051c015b8281106103855750506102c0565b5f8155018590610377565b634e487b7160e01b5f52602260045260245ffd5b90607f16906102af565b8051602090818110156103d85750601f82511161024f578082519201519080831061024157501790565b9192916001600160401b0381116101c85760019182548381811c911680156104da575b8282101461039057601f81116104a7575b5080601f83116001146104475750819293945f9261043c575b50505f19600383901b1c191690821b17905560ff90565b015190505f80610425565b90601f19831695845f52825f20925f905b8882106104905750508385969710610478575b505050811b01905560ff90565b01515f1960f88460031b161c191690555f808061046b565b808785968294968601518155019501930190610458565b835f5283601f835f20920160051c820191601f850160051c015b8281106104cf57505061040c565b5f81550184906104c1565b90607f16906103fb56fe60806040526004361015610011575f80fd5b5f3560e01c8063220d32d4146100d4578063530e1d43146100cf5780636d0fae4a146100ca5780638247a97c146100c557806384b0196e146100c05780639333fbda146100bb57806393f79bc3146100b65780639f86fd85146100b1578063b1138ad1146100ac578063c4b5d62c146100a7578063ced44ba7146100a25763d46104831461009d575f80fd5b6106cc565b610608565b6105c4565b6105a2565b610511565b610412565b6103bb565b6102c5565b61027d565b610239565b6101d3565b610109565b600435906001600160a01b03821682036100ef57565b5f80fd5b602435906001600160a01b03821682036100ef57565b346100ef5760403660031901126100ef5760206101356101276100d9565b61012f6100f3565b906106ee565b6040519015158152f35b9181601f840112156100ef5782359167ffffffffffffffff83116100ef57602083818601950101116100ef57565b9060806003198301126100ef576001600160a01b039160043583811681036100ef579260243590811681036100ef579160443565ffffffffffff811681036100ef57916064359067ffffffffffffffff82116100ef576101cf9160040161013f565b9091565b346100ef576020600161022961022f61021a6101ee3661016d565b969290949193888060a01b03165f526003895260405f209060018060a01b03165f5260205260405f2090565b92868060d01b0395369161080b565b916108c3565b1614604051908152f35b346100ef575f3660031901126100ef576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100ef5760203660031901126100ef5761029f6102996100d9565b336109bf565b005b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b346100ef575f3660031901126100ef5761035e6103017f0000000000000000000000000000000000000000000000000000000000000000610e2a565b61032a7f0000000000000000000000000000000000000000000000000000000000000000610f28565b6040519061033782610786565b5f825261036c602091604051958695600f60f81b875260e0602088015260e08701906102a1565b9085820360408701526102a1565b4660608501523060808501525f60a085015283810360c0850152602080845192838152019301915f5b8281106103a457505050500390f35b835185528695509381019392810192600101610395565b346100ef5760403660031901126100ef5760206104096103d96100d9565b6103e16100f3565b6001600160a01b039182165f9081526002855260408082209290931681526020919091522090565b54604051908152f35b346100ef576104203661016d565b909165ffffffffffff8061043342610ff1565b1691169081106104ff576104df926104d06104d89260018060a01b0380891691825f5260026020526104788960405f209060018060a01b03165f5260205260405f2090565b546040519260208401947f7830334d17a05ab8aeca8f1778e27182208fc2d454ac7b38a4edc2069ee3a4a6865260408501528a166060840152608083015260a082015260a081526104c8816107a2565b519020611023565b92369161080b565b9084610a15565b156104ed5761029f91610af1565b604051638baa579f60e01b8152600490fd5b60405163df4cc36d60e01b8152600490fd5b346100ef5760403660031901126100ef5761052a6100d9565b60243567ffffffffffffffff81116100ef575f9161054d8392369060040161013f565b90816040519283928337810184815203915af461059a61056b610841565b9161058c6040519384921515602084015260408084015260608301906102a1565b03601f1981018352826107be565b805190602001fd5b346100ef5760203660031901126100ef5761029f6105be6100d9565b33610c0d565b346100ef575f3660031901126100ef576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100ef576106163661016d565b909165ffffffffffff8061062942610ff1565b1691169081106104ff576106be926104d06104d89260018060a01b0380891691825f52600260205261066e8960405f209060018060a01b03165f5260205260405f2090565b546040519260208401947f6ab5200f1123a8d51d1695a9e5e757267926b53c6359f90b8873cc7dcc30ea2c865260408501528a166060840152608083015260a082015260a081526104c8816107a2565b156104ed5761029f91610c0d565b346100ef5760203660031901126100ef5761029f6106e86100d9565b33610af1565b6001600160a01b039081165f908152600360209081526040808320939094168252919091522080548061072c57505060015f5b818060d01b03161490565b5f1990808281011161074c576001925f5260205f2001015460301c610721565b61088c565b634e487b7160e01b5f52604160045260245ffd5b6040810190811067ffffffffffffffff82111761078157604052565b610751565b6020810190811067ffffffffffffffff82111761078157604052565b60c0810190811067ffffffffffffffff82111761078157604052565b90601f8019910116810190811067ffffffffffffffff82111761078157604052565b604051906107ed82610765565b565b67ffffffffffffffff811161078157601f01601f191660200190565b929192610817826107ef565b9161082560405193846107be565b8294818452818301116100ef578281602093845f960137010152565b3d1561086b573d90610852826107ef565b9161086060405193846107be565b82523d5f602084013e565b606090565b908160209103126100ef575163ffffffff811681036100ef5790565b634e487b7160e01b5f52601160045260245ffd5b5f1981019190821161074c57565b90600163ffffffff8093160191821161074c57565b918051156109b557806020806108de93518301019101610870565b916108e98382610dd6565b926108fa845165ffffffffffff1690565b9065ffffffffffff808516921682811461099c578211918261093c575b505061092a576109279250611091565b90565b5050602001516001600160d01b031690565b90915061094983546108a0565b63ffffffff831614918215610962575b50505f80610917565b61099491925061097d610977610989926108ae565b85610dd6565b5165ffffffffffff1690565b65ffffffffffff1690565b115f80610959565b50505050602091909101516001600160d01b0316905090565b5061092791611091565b6001600160a01b039081165f8181526002602090815260408083209590941680835294905291822080546001019055907f8ed32926585579e6191b145240df788165f4957e1135f30a00e08ee8feb9d6809080a3565b610a1f8383611049565b506004819592951015610add57159384610ac7575b508315610a42575b50505090565b5f929350908291604051610a7a8161058c6020820194630b135d3f60e11b998a875260248401526040604484015260648301906102a1565b51915afa90610a87610841565b82610ab9575b82610a9d575b50505f8080610a3c565b9091506020818051810103126100ef5760200151145f80610a93565b915060208251101591610a8d565b6001600160a01b0383811691161493505f610a34565b634e487b7160e01b5f52602160045260245ffd5b90610b2d610b2882610b138560018060a01b03165f52600360205260405f2090565b9060018060a01b03165f5260205260405f2090565b611385565b9091506001600160d01b031615610bd85765ffffffffffff80610b4f42610ff1565b16911614610bc657610b87610b7882610b138560018060a01b03165f52600360205260405f2090565b610b8142610ff1565b90611590565b5050610b9381836109bf565b6001600160a01b0390811691167f1629cd9ad365627cf8408d19c50224af8f3213c1a18ae48062d92e22bddf7de55f80a3565b60405163291bf4b760e21b8152600490fd5b6040516334b09b3960e11b8152600490fd5b908160209103126100ef575180151581036100ef5790565b6040513d5f823e3d90fd5b6040516302910f8b60e31b8082526001600160a01b0383811660048401529293916020919082816024817f000000000000000000000000000000000000000000000000000000000000000089165afa908115610d8a575f91610da1575b5015610d8f576040519081526001600160a01b038316600482015281816024817f000000000000000000000000000000000000000000000000000000000000000088165afa918215610d8a575f92610d5d575b505015610d4b57610cce81846106ee565b610d395780610d04610cf58493610b138760018060a01b03165f52600360205260405f2090565b610cfe42610ff1565b9061168f565b5050610d1081856109bf565b1691167f9b730d5b907ee509de729817a2bb37e404418ba569b3a50f36192372f973cb415f80a3565b60405163dcdeaba360e01b8152600490fd5b6040516321f5408d60e01b8152600490fd5b610d7c9250803d10610d83575b610d7481836107be565b810190610bea565b5f80610cbd565b503d610d6a565b610c02565b604051630fb9ff9560e41b8152600490fd5b610db89150833d8511610d8357610d7481836107be565b5f610c6a565b60405190610dcb82610765565b5f6020838281520152565b610dfb91610df591610de6610dbe565b50610def610dbe565b50611170565b50611199565b65ffffffffffff81511690602060018060d01b039101511660405191610e2083610765565b8252602082015290565b60ff8114610e3b57610927906111bd565b506040515f80546001918160011c9260018316908115610f1e575b602090602086108314610f0a5785875286946020860193908115610eeb5750600114610e8c575b505050610927925003826107be565b925093610eb95f80527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390565b945f935b828510610ed5575050506109279350015f8080610e7d565b8654858501529586019587955093810193610ebd565b925050506109279491925060ff19168252151560051b015f8080610e7d565b634e487b7160e01b5f52602260045260245ffd5b93607f1693610e56565b60ff8114610f3957610927906111bd565b506040516001805480821c915f90828116908115610fe7575b602090602086108314610f0a5785875286946020860193908115610eeb5750600114610f8757505050610927925003826107be565b925093610fb560015f527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf690565b945f935b828510610fd1575050506109279350015f8080610e7d565b8654858501529586019587955093810193610fb9565b93607f1693610f52565b65ffffffffffff90818111611004571690565b604490604051906306dfcc6560e41b8252603060048301526024820152fd5b60429061102e6111e9565b906040519161190160f01b8352600283015260228201522090565b8151919060418303611079576110729250602082015190606060408401519301515f1a90611303565b9192909190565b50505f9160029190565b906001820180921161074c57565b908154905f918060058111611127575b50915b8281106110da575050806110b85750505f90565b610927916110c86110d3926108a0565b905f5260205f200190565b5460301c90565b90918082169080831860011c820180921161074c57845f5265ffffffffffff808360205f20015416908516105f146111155750915b906110a4565b92915061112190611083565b9061110f565b90611131826113f2565b820391821161074c57845f5265ffffffffffff808360205f20015416908416105f1461115f57505b5f6110a1565b925061116a90611083565b91611159565b8054821015611185575f5260205f2001905f90565b634e487b7160e01b5f52603260045260245ffd5b906040516111a681610765565b915465ffffffffffff8116835260301c6020830152565b60ff811690601f82116111d75760405191610e2083610765565b604051632cd44ac360e21b8152600490fd5b307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031614806112da575b15611244577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a081526112d4816107a2565b51902090565b507f0000000000000000000000000000000000000000000000000000000000000000461461121b565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841161137a579160209360809260ff5f9560405194855216868401526040830152606082015282805260015afa15610d8a575f516001600160a01b0381161561137057905f905f90565b505f906001905f90565b5050505f9160039190565b8054806113965750505f905f905f90565b5f1990808281011161074c576113b3925f5260205f200101611199565b9065ffffffffffff82511691602060018060d01b0391015116906001929190565b81156113de570490565b634e487b7160e01b5f52601260045260245ffd5b801561152b57806114c46114bd6114b36114a961149f61149561148b61148160016109279a5f908b60801c8061151f575b508060401c80611512575b508060201c80611505575b508060101c806114f8575b508060081c806114eb575b508060041c806114de575b508060021c806114d1575b50821c6114ca575b811c1b61147a818b6113d4565b0160011c90565b61147a818a6113d4565b61147a81896113d4565b61147a81886113d4565b61147a81876113d4565b61147a81866113d4565b61147a81856113d4565b80926113d4565b90611758565b810161146d565b600291509101905f611465565b600491509101905f61145a565b600891509101905f61144f565b601091509101905f611444565b602091509101905f611439565b604091509101905f61142e565b9150506080905f611423565b505f90565b8054680100000000000000008110156107815761155291600182018155611170565b91909161157d57805160209091015160301b65ffffffffffff191665ffffffffffff91909116179055565b634e487b7160e01b5f525f60045260245ffd5b805490811561166d576115b86115b36115a8846108a0565b835f5260205f200190565b611199565b906115c9825165ffffffffffff1690565b65ffffffffffff858116949116841061165b57611628946020946115f6610989865165ffffffffffff1690565b0361162d575061161a916110c861160c926108a0565b65ffffffffffff8154169055565b01516001600160d01b031690565b905f90565b90506116569161164c61163e6107e0565b65ffffffffffff9093168352565b5f85830152611530565b61161a565b604051632520601d60e01b8152600490fd5b61168992915061167e61163e6107e0565b5f6020830152611530565b5f905f90565b8054908115611734576116a76115b36115a8846108a0565b906116b8825165ffffffffffff1690565b65ffffffffffff858116949116841061165b57611712946020946116e5610989865165ffffffffffff1690565b03611718575061161a916110c86116fb926108a0565b660100000000000065ffffffffffff825416179055565b90600190565b90506116569161172961163e6107e0565b600182860152611530565b61175192915061174561163e6107e0565b60016020830152611530565b5f90600190565b9080821015611765575090565b90509056fea2646970667358221220d08a62079d1131e45276e2c77bac54e5153d28c3ca2f82717b7a540da37abe8c64736f6c63430008190033000000000000000000000000ad817a6bc954f678451a71363f04150fdd81af9f000000000000000000000000c773b1011461e7314cf05f97d95aa8e92c1fd8aa0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000001b4f70657261746f724e6574776f726b4f7074496e536572766963650000000000")]
        contract NetworkOptInService { }
    );

    #[tokio::test]
    async fn test_opt_in_network() {
        let anvil = Anvil::new().block_time(1).try_spawn().unwrap();

        let network: PrivateKeySigner = anvil.keys()[1].clone().into();
        let network_wallet = EthereumWallet::from(network.clone());
        let operator: PrivateKeySigner = anvil.keys()[0].clone().into();
        let operator_wallet = EthereumWallet::from(operator.clone());

        let rpc_url = anvil.ws_endpoint_url();
        let ws_url = WsConnect::new(rpc_url.clone());

        let network_provider = ProviderBuilder::new()
            .with_recommended_fillers()
            .wallet(network_wallet)
            .on_ws(ws_url.clone())
            .await
            .unwrap();

        let operator_provider = ProviderBuilder::new()
            .with_recommended_fillers()
            .wallet(operator_wallet)
            .on_ws(ws_url)
            .await
            .unwrap();

        // Register the network
        let network_registry = NetworkRegistry::deploy(network_provider.clone()).await.unwrap();
        let network_registry =
            INetworkRegistry::new(network_registry.address().clone(), network_provider.clone());

        let pending_tx =
            network_registry.registerNetwork().send().await.unwrap().register().await.unwrap();
        let _ = pending_tx.await;
        assert!(network_registry.isEntity(network.address()).call().await.unwrap()._0);

        // Register the operator
        let operator_registry = OperatorRegistry::deploy(operator_provider.clone()).await.unwrap();
        let operator_registry =
            IOperatorRegistry::new(operator_registry.address().clone(), operator_provider.clone());

        let pending_tx =
            operator_registry.registerOperator().send().await.unwrap().register().await.unwrap();
        let _ = pending_tx.await;
        assert!(operator_registry.isEntity(operator.address()).call().await.unwrap()._0);

        // Opt in the network
        let network_opt_in_service =
            NetworkOptInService::deploy(operator_provider.clone()).await.unwrap();
        let network_opt_in_service =
            IOptInService::new(network_opt_in_service.address().clone(), operator_provider.clone());

        let pending_tx = network_opt_in_service
            .optIn_0(network.address())
            .send()
            .await
            .unwrap()
            .register()
            .await
            .unwrap();
        let _ = pending_tx.await;

        let IOptInService::isOptedInReturn { _0: is_opted_in } = network_opt_in_service
            .isOptedIn(operator.address(), network.address())
            .call()
            .await
            .unwrap();
        assert!(is_opted_in);
    }
}
